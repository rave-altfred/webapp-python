version: '3.8'

services:
  webapp:
    image: registry.digitalocean.com/altfred-registry/webapp-python:latest
    container_name: webapp-python
    restart: unless-stopped
    env_file: .env
    secrets:
      - valkey_password
      - postgres_password
      - auth_password
      - security_token
      - spaces_secret_key
    environment:
      # Flask configuration
      - FLASK_ENV=production
      - DEBUG=false
      - APP_PORT=8080
      
      # Database connections - non-sensitive config
      - VALKEY_HOST=${VALKEY_HOST}
      - VALKEY_PORT=${VALKEY_PORT:-6379}
      - VALKEY_DB=${VALKEY_DB:-0}
      - VALKEY_USER=${VALKEY_USER:-default}
      
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_SSLMODE=${POSTGRES_SSLMODE:-require}
      
      # Authentication configuration - non-sensitive
      - AUTH_USERNAME=${AUTH_USERNAME:-admin}
      - ALLOWED_IPS=${ALLOWED_IPS:-}
      
      # DigitalOcean Spaces - non-sensitive config
      - SPACES_BUCKET=${SPACES_BUCKET:-}
      - SPACES_PUBLIC_BASE_URL=${SPACES_PUBLIC_BASE_URL:-}
      - SPACES_ACCESS_KEY=${SPACES_ACCESS_KEY:-}
      - SPACES_ENDPOINT=${SPACES_ENDPOINT:-https://fra1.digitaloceanspaces.com}
      
      # Secrets configuration - tells app to read from secrets files
      - USE_DOCKER_SECRETS=true
      - VALKEY_PASSWORD_FILE=/run/secrets/valkey_password
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - AUTH_PASSWORD_FILE=/run/secrets/auth_password
      - SECURITY_TOKEN_FILE=/run/secrets/security_token
      - SPACES_SECRET_KEY_FILE=/run/secrets/spaces_secret_key
      
      # Configuration file
      - CONFIG_FILE=/app/production.config.json
      
    volumes:
      # Mount configuration file
      - ./production.config.json:/app/production.config.json:ro
      # Mount logs directory
      - ./logs:/app/logs
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    
    # Network configuration
    networks:
      - webapp-network

  # Reverse proxy with nginx and SSL
  nginx:
    image: nginx:alpine
    container_name: webapp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - webapp
    networks:
      - webapp-network
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  webapp-network:
    driver: bridge

secrets:
  valkey_password:
    file: ./secrets/valkey_password
  postgres_password:
    file: ./secrets/postgres_password
  auth_password:
    file: ./secrets/auth_password
  security_token:
    file: ./secrets/security_token
  spaces_secret_key:
    file: ./secrets/spaces_secret_key

